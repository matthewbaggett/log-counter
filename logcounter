#!/usr/bin/env php
<?php

$numberOfErrorsToDisplay = 10;

$apacheLog = $argv[1];

$errorLog = file_get_contents($apacheLog);

$logLines = explode("\n", $errorLog);

$buckets = [];
$pids = [];
$errors = [];
$lines = [];
$errorCount = 0;

$apacheDateFormat = "D M d H:i:s.u Y";

$logLinesCount = count($logLines);


echo "Parsing {$logLinesCount} log lines... \n";
foreach($logLines as $i => $logLine){
    $percentage = (100/$logLinesCount) * $i;
    $percentage = number_format($percentage);
    if(!isset($lastPercentage) || $percentage > $lastPercentage) {
        $memory = number_format(memory_get_usage() / 1024 / 1024);
        echo "\r > {$percentage}% {$memory} MB.";
    }
    $lastPercentage = $percentage;
    $elements = explode("]", $logLine);
    foreach($elements as &$element){
        $element = str_replace("[", "", $element);
        $element = trim($element);
    }
    if(stripos($logLine, "PHP") !== false) {
        $line = new StdClass();
        //Tue Jul 28 07:35:02.340153 2015

        if(count($elements) == 4) {
            $line->error = $elements[3];
        }elseif(count($elements) == 5){
            $line->error = $elements[4];
        }

        // Exclude PHP Stack traces.
        #echo $logLine . "\n > substr: " . substr($line->error,0,6) . "\n";
        if(substr($line->error,0,6) != 'PHP   ' && strpos($line->error, 'PHP Stack trace') === false){
            $dateTime = DateTime::createFromFormat($apacheDateFormat, $elements[0]);
            $line->time = $dateTime;
            $line->application = $elements[1];
            $line->pid = $elements[2];
            $line->hash = substr(md5($line->error),0,7);
            #echo "Hash of \"{$line->error}\" is {$line->hash}\n";
            $pids[$line->pid] = isset($errors[$line->pid]) ? $errors[$line->pid] + 1 : 1;
            $errors[$line->hash] = isset($errors[$line->hash]) ? $errors[$line->hash] + 1 : 1;
            $buckets[$line->application][$line->pid][] = $line;

            $lines[$line->hash] = $line;
            $errorCount++;
        }

    }
}

asort($errors);
$errors = array_reverse($errors);

$sortedErrors = [];
foreach($errors as $errorHash => $frequency){
    $sortedErrors[] = ['hash' => $errorHash, 'frequency' => $frequency];
}
echo"\n";
echo"\n";

echo "There were " . count($buckets) . " applications\n";
echo " > Unique PIDs: " . count($pids) . "\n";
echo " > Unique Errors: " . count($errors) . "\n";
echo " > Total Errors: {$errorCount}\n";
echo "\n";

echo "Top {$numberOfErrorsToDisplay} errors:\n";
foreach(array_slice($sortedErrors, 0, $numberOfErrorsToDisplay) as $error){
    $line = $lines[$error['hash']];
    echo " > {$line->hash} ({$error['frequency']} times) {$line->error}\n";
}